
==================== FINAL INTERFACE ====================
2018-04-14 13:31:39.95756 UTC

interface addition-0.1.0.0-804UHSV1dG2GtmXFhIO6om:Addition 8022
  interface hash: 991c8e1f490a80ec7864822b4e96a419
  ABI hash: a46d03bc8b557c4f3a779a12444e617b
  export-list hash: 26d37c48988985a44c4c212107790c13
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7ee3aa46b0b5cccfe6217504e4ba05f4
  sig of: Nothing
  used TH splices: False
  where
exports:
  Addition.dividedBy
  Addition.main
  Addition.DividedResult{Addition.DividedByZero Addition.Result}
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.10.1
                      ansi-terminal-0.8.0.2 array-0.5.2.0 base-4.10.1.0 call-stack-0.1.0
                      colour-2.3.4 containers-0.5.10.2 deepseq-1.4.3.0 directory-1.3.0.2
                      filepath-1.4.1.2 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 hspec-2.4.8
                      hspec-core-2.4.8 hspec-expectations-0.8.2 integer-gmp-1.0.1.0
                      pretty-1.1.3.3 primitive-0.6.3.0 quickcheck-io-0.2.0 random-1.1
                      setenv-0.1.1.3 stm-2.4.5.0 template-haskell-2.12.0.0 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.2.0 unix-2.7.2.2
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         hspec-core-2.4.8:Test.Hspec.Core.Example
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hspec-2.4.8:Test.Hspec 110a1f53b5ea97d2b9e5f46d1db4e28b
import  -/  hspec-core-2.4.8:Test.Hspec.Core.Runner ecf4e81de54bb3667c1e50e537eb8a21
import  -/  hspec-core-2.4.8:Test.Hspec.Core.Spec 1a97a8220014b492ebc94aeb87612ea8
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 8bc0d926d5b42398a254e04604809fe4
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
a920cadaf8dac7536b38c63d904d6284
  $fEqDividedResult :: GHC.Classes.Eq Addition.DividedResult
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Addition.DividedResult
                  Addition.$fEqDividedResult_$c==
                  Addition.$fEqDividedResult_$c/= -}
a920cadaf8dac7536b38c63d904d6284
  $fEqDividedResult_$c/= ::
    Addition.DividedResult -> Addition.DividedResult -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Addition.DividedResult)
                   (b :: Addition.DividedResult) ->
                 case a of wild {
                   Addition.Result a1
                   -> case b of wild1 {
                        Addition.Result b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case GHC.Integer.Type.eqInteger# ww1 ww4 of wild2 { DEFAULT ->
                           case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case GHC.Integer.Type.eqInteger# ww2 ww5 of wild4 { DEFAULT ->
                                case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild4 of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } }
                        Addition.DividedByZero -> GHC.Types.True }
                   Addition.DividedByZero
                   -> case b of wild1 {
                        Addition.Result ipv -> GHC.Types.True
                        Addition.DividedByZero -> GHC.Types.False } }) -}
a920cadaf8dac7536b38c63d904d6284
  $fEqDividedResult_$c== ::
    Addition.DividedResult -> Addition.DividedResult -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Addition.DividedResult)
                   (ds1 :: Addition.DividedResult) ->
                 case ds of wild {
                   Addition.Result a1
                   -> case ds1 of wild1 {
                        Addition.Result b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case GHC.Integer.Type.eqInteger# ww1 ww4 of wild2 { DEFAULT ->
                           case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Integer.Type.eqInteger ww2 ww5 } } } }
                        Addition.DividedByZero -> GHC.Types.False }
                   Addition.DividedByZero
                   -> case ds1 of wild1 {
                        Addition.Result ipv -> GHC.Types.False
                        Addition.DividedByZero -> GHC.Types.True } }) -}
a920cadaf8dac7536b38c63d904d6284
  $fShowDividedResult :: GHC.Show.Show Addition.DividedResult
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Addition.DividedResult
                  Addition.$fShowDividedResult_$cshowsPrec
                  Addition.$fShowDividedResult_$cshow
                  Addition.$fShowDividedResult_$cshowList -}
a920cadaf8dac7536b38c63d904d6284
  $fShowDividedResult1 :: Addition.DividedResult -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Addition.$fShowDividedResult_$cshowsPrec
                   Addition.$fShowDividedResult2) -}
35dd004151e1e1b6534ef8503bc89ea2
  $fShowDividedResult2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2355fe9ddaff654c7745a7d6c7165637
  $fShowDividedResult3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Addition.$fShowDividedResult4) -}
4b24bc32c48410bb4d6f85a469411634
  $fShowDividedResult4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DividedByZero"#) -}
aadeb9afe56b0a8acac32bafa84e80a2
  $fShowDividedResult5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Result "#) -}
02b099de02979f9bdacf8d6a91ea4bb9
  $fShowDividedResult6 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a920cadaf8dac7536b38c63d904d6284
  $fShowDividedResult_$cshow ::
    Addition.DividedResult -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Addition.DividedResult) ->
                 case x of wild {
                   Addition.Result b1
                   -> GHC.CString.unpackAppendCString#
                        Addition.$fShowDividedResult5
                        (case b1 of ww { (,) ww1 ww2 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (case GHC.Show.$w$cshowsPrec4
                                   0#
                                   ww1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showList__1
                                      (GHC.Show.$fShow(,)_$sgo1
                                         Addition.$fShowDividedResult6
                                         (\ (w2 :: GHC.Base.String)[OneShot] ->
                                          case GHC.Show.$w$cshowsPrec4
                                                 0#
                                                 ww2
                                                 w2 of ww4 { (#,#) ww3 ww5 ->
                                          GHC.Types.: @ GHC.Types.Char ww3 ww5 })
                                         (GHC.Types.[] @ GHC.Show.ShowS))) of ww4 { (#,#) ww3 ww5 ->
                            GHC.Types.: @ GHC.Types.Char ww3 ww5 }) })
                   Addition.DividedByZero -> Addition.$fShowDividedResult3 }) -}
a920cadaf8dac7536b38c63d904d6284
  $fShowDividedResult_$cshowList ::
    [Addition.DividedResult] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Addition.DividedResult
                   Addition.$fShowDividedResult1) -}
a920cadaf8dac7536b38c63d904d6284
  $fShowDividedResult_$cshowsPrec ::
    GHC.Types.Int -> Addition.DividedResult -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Addition.DividedResult)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Addition.Result b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.CString.unpackAppendCString#
                             Addition.$fShowDividedResult5
                             (case b1 of ww { (,) ww1 ww2 ->
                              GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)4
                                (case GHC.Show.$w$cshowsPrec4
                                        0#
                                        ww1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showList__1
                                           (GHC.Show.$fShow(,)_$sgo1
                                              (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta)
                                              (\ (w2 :: GHC.Base.String)[OneShot] ->
                                               case GHC.Show.$w$cshowsPrec4
                                                      0#
                                                      ww2
                                                      w2 of ww4 { (#,#) ww3 ww5 ->
                                               GHC.Types.: @ GHC.Types.Char ww3 ww5 })
                                              (GHC.Types.[]
                                                 @ GHC.Show.ShowS))) of ww4 { (#,#) ww3 ww5 ->
                                 GHC.Types.: @ GHC.Types.Char ww3 ww5 }) })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Addition.$fShowDividedResult5
                                (case b1 of ww { (,) ww1 ww2 ->
                                 GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)4
                                   (case GHC.Show.$w$cshowsPrec4
                                           0#
                                           ww1
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (GHC.Show.$fShow(,)_$sgo1
                                                 (GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.$fShow(,)2
                                                    (GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.$fShow(,)2
                                                       eta))
                                                 (\ (w2 :: GHC.Base.String)[OneShot] ->
                                                  case GHC.Show.$w$cshowsPrec4
                                                         0#
                                                         ww2
                                                         w2 of ww4 { (#,#) ww3 ww5 ->
                                                  GHC.Types.: @ GHC.Types.Char ww3 ww5 })
                                                 (GHC.Types.[]
                                                    @ GHC.Show.ShowS))) of ww4 { (#,#) ww3 ww5 ->
                                    GHC.Types.: @ GHC.Types.Char ww3 ww5 }) })) } }
                   Addition.DividedByZero
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Addition.$fShowDividedResult3
                        eta }) -}
e0cf3ddd35854118bb7ab736c808dc1b
  $tc'DividedByZero :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7373024786619483171##
                   18235411928138010705##
                   Addition.$trModule
                   Addition.$tc'DividedByZero2
                   0#
                   Addition.$tc'DividedByZero1) -}
b43cea772f94b857c517379bdb9c7f5f
  $tc'DividedByZero1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
092d2e4a253bb0f65ac65ac2a6c9b7a4
  $tc'DividedByZero2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Addition.$tc'DividedByZero3) -}
97fd3f1f982b8dca9de8d2218d162ccf
  $tc'DividedByZero3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DividedByZero"#) -}
c053c1e7906ea6f4ab79bd659e759419
  $tc'Result :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6760982593765898222##
                   11234688438681276212##
                   Addition.$trModule
                   Addition.$tc'Result2
                   0#
                   Addition.$tc'Result1) -}
4b76f7f05bae7cacf647cb76bdb6e39e
  $tc'Result1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6b6b0003178dbda218cefa16ee9ab5ea
  $tc'Result2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Addition.$tc'Result3) -}
aaf5e1f55db2e607e72ed0eacb20253a
  $tc'Result3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Result"#) -}
00e30e624bfd6e15256bbaf62e9f7b65
  $tcDividedResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13092913042416958524##
                   4017450651499093862##
                   Addition.$trModule
                   Addition.$tcDividedResult1
                   0#
                   GHC.Types.krep$*) -}
3eefd44f89b8fa09a686fe78caffe7af
  $tcDividedResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Addition.$tcDividedResult2) -}
f2c81e214ace0a8b97161028bc764572
  $tcDividedResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DividedResult"#) -}
4170beb19e4cad3d73de2f28c1515349
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Addition.$trModule3
                   Addition.$trModule1) -}
12ac6efa278fdc4a3cea3d52acd266e5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Addition.$trModule2) -}
cea35f3c00934730bf67331b0c21a00f
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Addition"#) -}
ed0cbe602c306ef7781229b3e3da7d9d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Addition.$trModule4) -}
6df117546a12bc165233906602b5d3de
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("addition-0.1.0.0-804UHSV1dG2GtmXFhIO6om"#) -}
a920cadaf8dac7536b38c63d904d6284
  data DividedResult
    = Result (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    | DividedByZero
51e73b799d991b70f7ea535f5452788c
  dividedBy ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> Addition.DividedResult
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (ds :: GHC.Integer.Type.Integer)
                   (ds1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger#
                        ds1
                        Addition.dividedBy2 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.ltInteger#
                             ds
                             Addition.dividedBy2 of v { DEFAULT ->
                      let {
                        lvl17 :: GHC.Types.Int
                        = case GHC.Integer.Type.ltInteger#
                                 ds1
                                 Addition.dividedBy2 of v1 { DEFAULT ->
                          GHC.Types.I# v1 }
                      } in
                      let {
                        lvl18 :: GHC.Types.Bool = GHC.Prim.tagToEnum# @ GHC.Types.Bool v
                      } in
                      letrec {
                        go :: GHC.Integer.Type.Integer
                              -> GHC.Integer.Type.Integer
                              -> GHC.Integer.Type.Integer
                              -> Addition.DividedResult
                          <join 3> {- Arity: 3, Strictness: <S,U><S,1*U><L,U> -}
                        = \ (n :: GHC.Integer.Type.Integer)
                            (d :: GHC.Integer.Type.Integer)
                            (count :: GHC.Integer.Type.Integer) ->
                          let {
                            posD :: GHC.Integer.Type.Integer = GHC.Integer.Type.absInteger d
                          } in
                          let {
                            posN :: GHC.Integer.Type.Integer = GHC.Integer.Type.absInteger n
                          } in
                          let {
                            $j :: Addition.DividedResult <join 0>
                            = let {
                                $j1 :: Addition.DividedResult <join 0>
                                = case GHC.Integer.Type.ltInteger# posN posD of wild2 { DEFAULT ->
                                  case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                                    GHC.Types.False
                                    -> go
                                         (GHC.Integer.Type.minusInteger posN posD)
                                         posD
                                         (GHC.Integer.Type.plusInteger count Addition.dividedBy1)
                                    GHC.Types.True -> Addition.Result (count, n) } }
                              } in
                              let {
                                $j2 :: Addition.DividedResult <join 0>
                                = case GHC.Integer.Type.ltInteger# posN posD of wild2 { DEFAULT ->
                                  case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                                    GHC.Types.False -> $j1
                                    GHC.Types.True
                                    -> Addition.Result (GHC.Integer.Type.negateInteger count, n) } }
                              } in
                              case GHC.Prim.tagToEnum# @ GHC.Types.Bool v of wild2 {
                                GHC.Types.False
                                -> case lvl17 of v1 { GHC.Types.I# v2 ->
                                   case GHC.Prim.tagToEnum# @ GHC.Types.Bool v2 of wild3 {
                                     GHC.Types.False -> $j1 GHC.Types.True -> $j2 } }
                                GHC.Types.True -> $j2 }
                          } in
                          case lvl18 of wild2 {
                            GHC.Types.False -> $j
                            GHC.Types.True
                            -> case lvl17 of v1 { GHC.Types.I# v2 ->
                               case GHC.Prim.tagToEnum# @ GHC.Types.Bool v2 of wild3 {
                                 GHC.Types.False -> $j
                                 GHC.Types.True
                                 -> case GHC.Integer.Type.ltInteger# posN posD of wild4 { DEFAULT ->
                                    case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild4 of wild5 {
                                      GHC.Types.False -> $j
                                      GHC.Types.True -> Addition.Result (count, n) } } } } }
                      } in
                      go ds ds1 Addition.dividedBy2 }
                   GHC.Types.True -> Addition.DividedByZero } }) -}
06c4a34d4c8389fd734a1cc79269f92c
  dividedBy1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
9090943dc97cb5e18b6cb049814824a0
  dividedBy2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
dfada154d96631d8ac7a65fc13634dcb
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Addition.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
2b15d896bf177aab6d094801f379e3ba
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Test.Hspec.Core.Options.defaultConfig
                        Addition.main2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.N:IO[0]
                                       <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0] <()>_N) <()>_N)))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
79ec8a569412503080be90fb4a3210af
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Addition.main_eta2 of wild {
                   Addition.Result a1
                   -> case a1 of ww { (,) ww1 ww2 ->
                      case GHC.Integer.Type.eqInteger#
                             ww1
                             Addition.main12 of wild1 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 of wild2 {
                        GHC.Types.False -> Addition.main11 eta2
                        GHC.Types.True
                        -> case GHC.Integer.Type.eqInteger#
                                  ww2
                                  Addition.dividedBy2 of wild3 { DEFAULT ->
                           case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 of wild4 {
                             GHC.Types.False -> Addition.main11 eta2
                             GHC.Types.True -> (# eta2, GHC.Tuple.() #) } } } } }
                   Addition.DividedByZero -> Addition.main11 eta2 }) -}
bccbb06902120aaad135e26155ed4062
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
5cf1f5cf665ef3740cd83921eac39c5e
  main12 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
367073d73d1a244f489d253b42cbe3a3
  main13 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
2e68e710c4a2534eecaad017e7d6d6d4
  main14 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (15) -}
988e557362918178dde6b78c29439aeb
  main15 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (Test.Hspec.Core.Tree.specItem13 Addition.main16) -}
3f8614355d273db41f054f73038c9c6d
  main16 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem11
                   Test.Hspec.Core.Tree.specItem3
                   Addition.main17) -}
b8b5ee028cf93159cc7d01d5e2a8f921
  main17 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it1
                   Addition.main18) -}
6a75dbc546ce6d1aa41dd5578a5189ad
  main18 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Addition.main27
                   Addition.main19
                   GHC.Stack.Types.EmptyCallStack) -}
021105f414c19360b3f90d002d6ab66a
  main19 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Addition.main26
                   Addition.main25
                   Addition.main23
                   Addition.main22
                   Addition.main21
                   Addition.main22
                   Addition.main20) -}
f3e4bb1c1709d94c856672e9440cf1dc
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           [Test.Hspec.Core.Tree.Tree
              (Test.Hspec.Core.Example.ActionWith ())
              (Test.Hspec.Core.Tree.Item ())]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta, Addition.main3 #)) -}
f8d9110f2e992986b48cf9218b78f753
  main20 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 34#) -}
9a5341b1656d510611946951eee429bc
  main21 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
e2c419c0d67e01536bc1b1cbea324f0e
  main22 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 26#) -}
e91b2f1bded05b0fdb00985c9bdc6a50
  main23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Addition.main24) -}
6e5eadc1e190919e61872d79546c5279
  main24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Addition.hs"#) -}
14d17d7661da371ba133bec67db497f0
  main25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Addition.$trModule2) -}
e1dec35bbcec587cb29c0f567a302918
  main26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Addition.$trModule4) -}
84515ca3db35a7ba80ebcc04d6a75e6f
  main27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Addition.main28) -}
6336e0a8cf124820f25c3181a2266092
  main28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("it"#) -}
23afc41a6556619fd5d3c903c357f229
  main29 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Addition.main32
                   Addition.main30) -}
5417e07f6b417b9ec2fa29ce64904b56
  main3 ::
    ((),
     [Test.Hspec.Core.Tree.Tree
        (Test.Hspec.Core.Example.ActionWith ())
        (Test.Hspec.Core.Tree.Item ())])
  {- Strictness: m, Unfolding: ((GHC.Tuple.(), Addition.main4)) -}
66affbfaa342073c6e9bd084f8e86c8f
  main30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Addition.main31) -}
26bc385e7818a3d207b1f6c1276babbc
  main31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("5 divided by 5 is 3"#) -}
37c6946be202929c4da854fdd427eeda
  main32 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '1'#) -}
90c35bfe85f163c67152c107abef8c66
  main33 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Addition.main36
                   Addition.main34) -}
cc1d8443075ee9488c58837e0bcd9718
  main34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Addition.main35) -}
b1b1f5f013f86ea5ea75b5f415c362ac
  main35 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ddition"#) -}
77ea75cac11f5694d9747c377ab81d8c
  main36 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'A'#) -}
debac32fafbe14afaab61362706dcb1e
  main4 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Addition.main5
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.Tree
                           (Test.Hspec.Core.Example.ActionWith ())
                           (Test.Hspec.Core.Tree.Item ())))) -}
b01ef25f9fc2a7998c7a102aea5adafc
  main5 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Strictness: m1,
     Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Addition.main33
                   Addition.main6
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
1ed867ca833e66ccc1fcfeb9b908c02e
  main6 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Addition.main7
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
1117f485542c0725c78e18976b942d45
  main7 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Strictness: m3,
     Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Addition.main8) -}
092c1072614b4455a2587c6aac8b294f
  main8 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Strictness: m,
     Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Addition.main29
                   Addition.main15
                   GHC.Types.False
                   Addition.main9
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
c919ab147528b02c3e938dd5bb7f35a3
  main9 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R <(Test.Hspec.Core.Example.Arg
                                  Test.Hspec.Expectations.Expectation
                                -> GHC.Types.IO ())
                               -> GHC.Types.IO ()>_R
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Addition.main10 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
ebe5ccea261405326676cb840c98dfc2
  main_eta2 :: Addition.DividedResult
  {- Unfolding: (Addition.dividedBy
                   Addition.main14
                   Addition.main13) -}
instance GHC.Classes.Eq [Addition.DividedResult]
  = Addition.$fEqDividedResult
instance GHC.Show.Show [Addition.DividedResult]
  = Addition.$fShowDividedResult
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

